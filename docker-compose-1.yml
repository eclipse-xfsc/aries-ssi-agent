version: '3.9'

networks:
  network1: 
    # driver: bridge
    name: test_network
    external: true

  
      


services:
  nats:
    image: nats
    ports:
      - '4222:4222' #Nats server port
      - '8222:8222' #Nats server Monitoring port
    command:
      [
        '--config',
        'nats-server.conf',
        '--debug',
        '--trace',
        '--user',
        'nats_user',
        '--pass',
        'nats_password',
      ]
    networks:
      - network1

  s3:
    image: minio/minio
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: ['server', '/data', '--console-address', ':9001']
    volumes:
      - /data
    networks:
      - network1

  init-s3:
    image: minio/mc
    entrypoint: >
      /bin/sh -c "
        sleep 1;
        /usr/bin/mc config host add ssi-s3 http://s3:9000 minio minio123;
        /usr/bin/mc mb --ignore-existing ssi-s3/ssi;
        /usr/bin/mc anonymous set download ssi-s3/ssi;
        /usr/bin/mc admin user add ssi-s3 ssi-abstraction very-long-secret-key;
        /usr/bin/mc admin policy attach ssi-s3 readwrite --user=ssi-abstraction;
        exit 0;
      "
    depends_on:
      - s3
    networks:
      - network1

  ssi-abstraction:
    build:
      args:
        - SERVICE=ssi-abstraction
    init: true
    ports:
      - '4000:3000'
      - '4005:3001'
    environment:
      HTTP_PORT: 3000
      NATS_URL: nats://nats:4222
      NATS_USER: nats_user
      NATS_PASSWORD: nats_password
      AGENT_NAME: ssi-abstraction-agent
      AGENT_WALLET_ID: ssi-wallet-id
      AGENT_WALLET_KEY: ssi-wallet-key
      AGENT_HOST: http://ssi-abstraction
      AGENT_INBOUND_PORT: 3001
      AGENT_LEDGER_ID: ID_UNION
      AGENT_INDY_DID_SEED: 00000000000_OCM_E1_Test_Endorser
      AGENT_INDY_DID: RVKyFidnaqJPznu8bgodDb
      AGENT_AUTO_ACCEPT_CONNECTION: true
      AGENT_AUTO_ACCEPT_CREDENTIAL: contentApproved
      TAILS_SERVER_BASE_URL: http://s3:9000
      TAILS_SERVER_BUCKET_NAME: ssi
      S3_ACCESS_KEY: ssi-abstraction
      S3_SECRET: very-long-secret-key
    depends_on:
      - nats
      - init-s3
    networks:
      - network1
     # - network2

  schema-manager:
    build:
      args:
        - SERVICE=schema-manager
    init: true
    environment:
      HTTP_PORT: 3000
      NATS_URL: nats://nats:4222
      NATS_USER: nats_user
      NATS_PASSWORD: nats_password
      NATS_MONITORING_URL: http://nats:8222
    ports:
      - '4001:3000'
    depends_on:
      - nats
    networks:
      - network1

  connection-manager:
    build:
      args:
        - SERVICE=connection-manager
    init: true
    environment:
      HTTP_HOST: 0.0.0.0
      HTTP_PORT: 3000
      NATS_URL: nats://nats:4222
      NATS_USER: nats_user
      NATS_PASSWORD: nats_password
      NATS_MONITORING_URL: http://nats:8222
    ports:
      - '4002:3000'
    depends_on:
      - nats
    networks:
      - network1
     # - network2

  credential-manager:
    build:
      args:
        - SERVICE=credential-manager
    init: true
    environment:
      HTTP_HOST: 0.0.0.0
      HTTP_PORT: 3000
      NATS_URL: nats://nats:4222
      NATS_USER: nats_user
      NATS_PASSWORD: nats_password
      NATS_MONITORING_URL: http://nats:8222
    ports:
      - '4003:3000'
    depends_on:
      - nats
    networks:
      - network1

  proof-manager:
    build:
      args:
        - SERVICE=proof-manager
    init: true
    environment:
      HTTP_HOST: 0.0.0.0
      HTTP_PORT: 3000
      NATS_URL: nats://nats:4222
      NATS_USER: nats_user
      NATS_PASSWORD: nats_password
      NATS_MONITORING_URL: http://nats:8222
    ports:
      - '4004:3000'
    depends_on:
      - nats
    networks:
      - network1

  did-manager:
    build:
      args:
        - SERVICE=did-manager
    init: true
    environment:
      HTTP_HOST: 0.0.0.0
      HTTP_PORT: 3000
      NATS_URL: nats://nats:4222
      NATS_USER: nats_user
      NATS_PASSWORD: nats_password
      NATS_MONITORING_URL: http://nats:8222
    ports:
      - '4006:3000'
    depends_on:
      - nats
    networks:
      - network1

  tenant-manager:
    build:
      args:
        - SERVICE=tenant-manager
    init: true
    environment:
      HTTP_HOST: 0.0.0.0
      HTTP_PORT: 3000
      NATS_URL: nats://nats:4222
      NATS_USER: nats_user
      NATS_PASSWORD: nats_password
      NATS_MONITORING_URL: http://nats:8222
    ports:
      - '4007:3000'
    depends_on:
      - nats
    networks:
      - network1
